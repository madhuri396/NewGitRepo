 Common Keywords You Can Use
| Keyword | Description | Example | 
| findBy | Basic select | findByEmail(String email) | 
| findBy...And... | Logical AND | findByEmailAndUsername(String e, String u) | 
| findBy...Or... | Logical OR | findByCityOrState(String c, String s) | 
| findBy...Between | Range queries (numeric or date) | findByCreatedDateBetween(LocalDate start, end) | 
| findBy...LessThan | Comparison | findByZipCodeLessThan(String zip) | 
| findBy...GreaterThan | Comparison | findByRatingGreaterThan(int rating) | 
| findBy...Like | Partial match (%value%) | findByUsernameLike(String pattern) | 
| findBy...StartingWith | Match beginning | findByCityStartingWith(String prefix) | 
| findBy...EndingWith | Match end | findByEmailEndingWith(String suffix) | 
| findBy...In | Match a list | findByStateIn(List<String> states) | 
| findBy...Not | Negate condition | findByUsernameNot(String name) | 
| findTopNBy... | Limit results | findTop3ByCountryOrderByIdDesc() | 
| existsBy... | Returns true/false | existsByEmail(String email) | 
| countBy... | Returns count of matches | countByCountry(String country) | 
| deleteBy... | Delete records matching condition | deleteByUserId(Long id) | 


 Smart Combinations
You can chain multiple expressions:
List<User> findByStatusAndCreatedDateAfter(String status, LocalDate date);
List<Address> findByCityContainingAndCountryIgnoreCase(String keyword, String country);

Ó∑ôÓ∑ö

- For sorting: use OrderBy
List<User> findByRoleOrderByCreatedDateDesc(String role);
- For pagination:
Page<User> findByRole(String role, Pageable pageable);
- 
- For null checks:
List<User> findByEmailIsNull();



Absolutely, Javeed! Let‚Äôs dive into more custom query examples you can use with JpaRepository to level up your data access layer. These cover method naming conventions, JPQL, native SQL, projections, and dynamic filtering.

üîç 1. Derived Query Methods (Method Naming)
List<User> findByUsername(String username);
List<User> findByEmailAndStatus(String email, String status);
List<User> findByCreatedDateBetween(LocalDate start, LocalDate end);
List<User> findByRoleOrderByCreatedDateDesc(String role);


These are auto-generated by Spring based on method names‚Äîno need for @Query.

üß† 2. JPQL with @Query Annotation
@Query("SELECT u FROM User u WHERE u.email = :email")
User findByEmail(@Param("email") String email);

@Query("SELECT u FROM User u WHERE u.role = ?1 ORDER BY u.createdDate DESC")
List<User> findByRoleSorted(String role);

Ó∑ôÓ∑ö
JPQL uses entity names and fields‚Äînot table or column names.

üß¨ 3. Native SQL Queries
@Query(value = "SELECT * FROM users WHERE status = ?1", nativeQuery = true)
List<User> findByStatusNative(String status);

@Query(value = "SELECT * FROM users WHERE email LIKE %:keyword%", nativeQuery = true)
List<User> searchByEmailKeyword(@Param("keyword") String keyword);

Ó∑ôÓ∑ö
 DTO Projection from JPQL
@Query("SELECT new com.exa.dto.UserDTO(u.id, u.username, u.email) FROM User u WHERE u.role = :role")
List<UserDTO> findUserDTOsByRole(@Param("role") String role);

Ó∑ôÓ∑ö
This returns a list of DTOs directly‚Äîgreat for lightweight responses.

üîÑ 5. Pagination and Sorting
@Query("SELECT u FROM User u WHERE u.role = :role")
Page<User> findByRole(@Param("role") String role, Pageable pageable);

@Query("SELECT u FROM User u WHERE u.role = :role")
Page<User> findByRole(@Param("role") String role, Pageable pageable);

Dynamic Filtering with Specifications
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {}

Ó∑ôÓ∑ö
Then build filters dynamically using Specification<User> in your service layer.

üì∫ Want to see these in action?
You can check out this video tutorial on custom queries with Spring Data JPA or explore Baeldung‚Äôs guide to @Query annotation for deeper examples.

Would you like help writing a custom query for one of your entities‚Äîmaybe something like filtering addresses by city and type, or users by registration date range? I can sketch it out for you!






